// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ApplicantData {
  id             String    @id @default(cuid())
  firstName      String
  lastName       String
  middleName     String?
  email          String
  phoneNumber    String?
  nationality    String?
  message        String?
  payment        Payment[]
  hasUserApplied Boolean   @default(false)
}

// Prisma schema (example)
model Payment {
  id        String        @id @default(uuid())
  userId    String
  reference String        @unique
  amount    Int // in smallest currency unit (kobo, pesewa)
  status    String        @default("pending")
  provider  String?
  paidAt    DateTime?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  applicant ApplicantData @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Admission {
  id                        String      @id @default(cuid())
  firstName                 String
  lastName                  String
  hasUserApplied            Boolean     @default(false)
  middleName                String?
  passportPhoto             String
  supportingDocument        String?
  idCardPhoto               String?
  dateOfBirth               DateTime
  gender                    String
  phoneNumber               String?
  email                     String      @unique
  nationality               String?
  postalAddress             String?
  maritalStatus             String?
  languages                 String[]
  programChoice             String
  academics                 Academics[]
  reference                 String
  addressOfReference        String
  phoneOfReference          String
  emailOfReference          String
  parentName                String
  parentPhoneNumber         String
  parentEmail               String?
  parentAddress             String?
  sponsor                   String
  declarationDocument       String?
  consentLetterFromSponsor  String?
  supportingSponsorDocument String?
}

model Academics {
  id                     String     @id @default(cuid())
  qualification          String[]
  institution            String[]
  yearOfCompletion       String[]
  country                String[]
  supportingCertificates String[]
  startDate              DateTime[]
  uniqueId               String     @unique
  endDate                DateTime[]
  admission              Admission  @relation(fields: [uniqueId], references: [id], onDelete: Cascade)
}
